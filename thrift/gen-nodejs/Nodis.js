//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./nodis_types');
//HELPER FUNCTIONS AND STRUCTURES

var Nodis_createUserIndex_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
Nodis_createUserIndex_args.prototype = {};
Nodis_createUserIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_createUserIndex_args.prototype.write = function(output) {
  output.writeStructBegin('Nodis_createUserIndex_args');
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_createUserIndex_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nodis_createUserIndex_result.prototype = {};
Nodis_createUserIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_createUserIndex_result.prototype.write = function(output) {
  output.writeStructBegin('Nodis_createUserIndex_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_modifyUserIndex_args = function(args) {
  this.oldUser = null;
  this.newUser = null;
  if (args) {
    if (args.oldUser !== undefined) {
      this.oldUser = args.oldUser;
    }
    if (args.newUser !== undefined) {
      this.newUser = args.newUser;
    }
  }
};
Nodis_modifyUserIndex_args.prototype = {};
Nodis_modifyUserIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.oldUser = new ttypes.User();
        this.oldUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.newUser = new ttypes.User();
        this.newUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_modifyUserIndex_args.prototype.write = function(output) {
  output.writeStructBegin('Nodis_modifyUserIndex_args');
  if (this.oldUser) {
    output.writeFieldBegin('oldUser', Thrift.Type.STRUCT, 1);
    this.oldUser.write(output);
    output.writeFieldEnd();
  }
  if (this.newUser) {
    output.writeFieldBegin('newUser', Thrift.Type.STRUCT, 2);
    this.newUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_modifyUserIndex_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nodis_modifyUserIndex_result.prototype = {};
Nodis_modifyUserIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_modifyUserIndex_result.prototype.write = function(output) {
  output.writeStructBegin('Nodis_modifyUserIndex_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_queryUserPage_args = function(args) {
  this.queryStr = null;
  this.pageNo = null;
  this.pageSize = null;
  if (args) {
    if (args.queryStr !== undefined) {
      this.queryStr = args.queryStr;
    }
    if (args.pageNo !== undefined) {
      this.pageNo = args.pageNo;
    }
    if (args.pageSize !== undefined) {
      this.pageSize = args.pageSize;
    }
  }
};
Nodis_queryUserPage_args.prototype = {};
Nodis_queryUserPage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageNo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_queryUserPage_args.prototype.write = function(output) {
  output.writeStructBegin('Nodis_queryUserPage_args');
  if (this.queryStr) {
    output.writeFieldBegin('queryStr', Thrift.Type.STRING, 1);
    output.writeString(this.queryStr);
    output.writeFieldEnd();
  }
  if (this.pageNo) {
    output.writeFieldBegin('pageNo', Thrift.Type.I32, 2);
    output.writeI32(this.pageNo);
    output.writeFieldEnd();
  }
  if (this.pageSize) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 3);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_queryUserPage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nodis_queryUserPage_result.prototype = {};
Nodis_queryUserPage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_queryUserPage_result.prototype.write = function(output) {
  output.writeStructBegin('Nodis_queryUserPage_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_createGroupIndex_args = function(args) {
  this.group = null;
  if (args) {
    if (args.group !== undefined) {
      this.group = args.group;
    }
  }
};
Nodis_createGroupIndex_args.prototype = {};
Nodis_createGroupIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.group = new ttypes.Group();
        this.group.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_createGroupIndex_args.prototype.write = function(output) {
  output.writeStructBegin('Nodis_createGroupIndex_args');
  if (this.group) {
    output.writeFieldBegin('group', Thrift.Type.STRUCT, 1);
    this.group.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_createGroupIndex_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nodis_createGroupIndex_result.prototype = {};
Nodis_createGroupIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_createGroupIndex_result.prototype.write = function(output) {
  output.writeStructBegin('Nodis_createGroupIndex_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_modifyGroupIndex_args = function(args) {
  this.oldGroup = null;
  this.newGroup = null;
  if (args) {
    if (args.oldGroup !== undefined) {
      this.oldGroup = args.oldGroup;
    }
    if (args.newGroup !== undefined) {
      this.newGroup = args.newGroup;
    }
  }
};
Nodis_modifyGroupIndex_args.prototype = {};
Nodis_modifyGroupIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.oldGroup = new ttypes.Group();
        this.oldGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.newGroup = new ttypes.Group();
        this.newGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_modifyGroupIndex_args.prototype.write = function(output) {
  output.writeStructBegin('Nodis_modifyGroupIndex_args');
  if (this.oldGroup) {
    output.writeFieldBegin('oldGroup', Thrift.Type.STRUCT, 1);
    this.oldGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.newGroup) {
    output.writeFieldBegin('newGroup', Thrift.Type.STRUCT, 2);
    this.newGroup.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_modifyGroupIndex_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nodis_modifyGroupIndex_result.prototype = {};
Nodis_modifyGroupIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_modifyGroupIndex_result.prototype.write = function(output) {
  output.writeStructBegin('Nodis_modifyGroupIndex_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_queryGroupPage_args = function(args) {
  this.queryStr = null;
  this.pageNo = null;
  this.pageSize = null;
  if (args) {
    if (args.queryStr !== undefined) {
      this.queryStr = args.queryStr;
    }
    if (args.pageNo !== undefined) {
      this.pageNo = args.pageNo;
    }
    if (args.pageSize !== undefined) {
      this.pageSize = args.pageSize;
    }
  }
};
Nodis_queryGroupPage_args.prototype = {};
Nodis_queryGroupPage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageNo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_queryGroupPage_args.prototype.write = function(output) {
  output.writeStructBegin('Nodis_queryGroupPage_args');
  if (this.queryStr) {
    output.writeFieldBegin('queryStr', Thrift.Type.STRING, 1);
    output.writeString(this.queryStr);
    output.writeFieldEnd();
  }
  if (this.pageNo) {
    output.writeFieldBegin('pageNo', Thrift.Type.I32, 2);
    output.writeI32(this.pageNo);
    output.writeFieldEnd();
  }
  if (this.pageSize) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 3);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_queryGroupPage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nodis_queryGroupPage_result.prototype = {};
Nodis_queryGroupPage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_queryGroupPage_result.prototype.write = function(output) {
  output.writeStructBegin('Nodis_queryGroupPage_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_queryPrefixUserPage_args = function(args) {
  this.queryStr = null;
  if (args) {
    if (args.queryStr !== undefined) {
      this.queryStr = args.queryStr;
    }
  }
};
Nodis_queryPrefixUserPage_args.prototype = {};
Nodis_queryPrefixUserPage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_queryPrefixUserPage_args.prototype.write = function(output) {
  output.writeStructBegin('Nodis_queryPrefixUserPage_args');
  if (this.queryStr) {
    output.writeFieldBegin('queryStr', Thrift.Type.STRING, 1);
    output.writeString(this.queryStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Nodis_queryPrefixUserPage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Nodis_queryPrefixUserPage_result.prototype = {};
Nodis_queryPrefixUserPage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Nodis_queryPrefixUserPage_result.prototype.write = function(output) {
  output.writeStructBegin('Nodis_queryPrefixUserPage_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NodisClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
NodisClient.prototype = {};
NodisClient.prototype.createUserIndex = function(user, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createUserIndex(user);
};

NodisClient.prototype.send_createUserIndex = function(user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUserIndex', Thrift.MessageType.CALL, this.seqid);
  var args = new Nodis_createUserIndex_args();
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NodisClient.prototype.recv_createUserIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nodis_createUserIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createUserIndex failed: unknown result');
};
NodisClient.prototype.modifyUserIndex = function(oldUser, newUser, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_modifyUserIndex(oldUser, newUser);
};

NodisClient.prototype.send_modifyUserIndex = function(oldUser, newUser) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('modifyUserIndex', Thrift.MessageType.CALL, this.seqid);
  var args = new Nodis_modifyUserIndex_args();
  args.oldUser = oldUser;
  args.newUser = newUser;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NodisClient.prototype.recv_modifyUserIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nodis_modifyUserIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('modifyUserIndex failed: unknown result');
};
NodisClient.prototype.queryUserPage = function(queryStr, pageNo, pageSize, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_queryUserPage(queryStr, pageNo, pageSize);
};

NodisClient.prototype.send_queryUserPage = function(queryStr, pageNo, pageSize) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryUserPage', Thrift.MessageType.CALL, this.seqid);
  var args = new Nodis_queryUserPage_args();
  args.queryStr = queryStr;
  args.pageNo = pageNo;
  args.pageSize = pageSize;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NodisClient.prototype.recv_queryUserPage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nodis_queryUserPage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryUserPage failed: unknown result');
};
NodisClient.prototype.createGroupIndex = function(group, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createGroupIndex(group);
};

NodisClient.prototype.send_createGroupIndex = function(group) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createGroupIndex', Thrift.MessageType.CALL, this.seqid);
  var args = new Nodis_createGroupIndex_args();
  args.group = group;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NodisClient.prototype.recv_createGroupIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nodis_createGroupIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createGroupIndex failed: unknown result');
};
NodisClient.prototype.modifyGroupIndex = function(oldGroup, newGroup, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_modifyGroupIndex(oldGroup, newGroup);
};

NodisClient.prototype.send_modifyGroupIndex = function(oldGroup, newGroup) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('modifyGroupIndex', Thrift.MessageType.CALL, this.seqid);
  var args = new Nodis_modifyGroupIndex_args();
  args.oldGroup = oldGroup;
  args.newGroup = newGroup;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NodisClient.prototype.recv_modifyGroupIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nodis_modifyGroupIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('modifyGroupIndex failed: unknown result');
};
NodisClient.prototype.queryGroupPage = function(queryStr, pageNo, pageSize, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_queryGroupPage(queryStr, pageNo, pageSize);
};

NodisClient.prototype.send_queryGroupPage = function(queryStr, pageNo, pageSize) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryGroupPage', Thrift.MessageType.CALL, this.seqid);
  var args = new Nodis_queryGroupPage_args();
  args.queryStr = queryStr;
  args.pageNo = pageNo;
  args.pageSize = pageSize;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NodisClient.prototype.recv_queryGroupPage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nodis_queryGroupPage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryGroupPage failed: unknown result');
};
NodisClient.prototype.queryPrefixUserPage = function(queryStr, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_queryPrefixUserPage(queryStr);
};

NodisClient.prototype.send_queryPrefixUserPage = function(queryStr) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryPrefixUserPage', Thrift.MessageType.CALL, this.seqid);
  var args = new Nodis_queryPrefixUserPage_args();
  args.queryStr = queryStr;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NodisClient.prototype.recv_queryPrefixUserPage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Nodis_queryPrefixUserPage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryPrefixUserPage failed: unknown result');
};
var NodisProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
NodisProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

NodisProcessor.prototype.process_createUserIndex = function(seqid, input, output) {
  var args = new Nodis_createUserIndex_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Nodis_createUserIndex_result();
  this._handler.createUserIndex(args.user, function (success) {
    result.success = success;
    output.writeMessageBegin("createUserIndex", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NodisProcessor.prototype.process_modifyUserIndex = function(seqid, input, output) {
  var args = new Nodis_modifyUserIndex_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Nodis_modifyUserIndex_result();
  this._handler.modifyUserIndex(args.oldUser, args.newUser, function (success) {
    result.success = success;
    output.writeMessageBegin("modifyUserIndex", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NodisProcessor.prototype.process_queryUserPage = function(seqid, input, output) {
  var args = new Nodis_queryUserPage_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Nodis_queryUserPage_result();
  this._handler.queryUserPage(args.queryStr, args.pageNo, args.pageSize, function (success) {
    result.success = success;
    output.writeMessageBegin("queryUserPage", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NodisProcessor.prototype.process_createGroupIndex = function(seqid, input, output) {
  var args = new Nodis_createGroupIndex_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Nodis_createGroupIndex_result();
  this._handler.createGroupIndex(args.group, function (success) {
    result.success = success;
    output.writeMessageBegin("createGroupIndex", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NodisProcessor.prototype.process_modifyGroupIndex = function(seqid, input, output) {
  var args = new Nodis_modifyGroupIndex_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Nodis_modifyGroupIndex_result();
  this._handler.modifyGroupIndex(args.oldGroup, args.newGroup, function (success) {
    result.success = success;
    output.writeMessageBegin("modifyGroupIndex", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NodisProcessor.prototype.process_queryGroupPage = function(seqid, input, output) {
  var args = new Nodis_queryGroupPage_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Nodis_queryGroupPage_result();
  this._handler.queryGroupPage(args.queryStr, args.pageNo, args.pageSize, function (success) {
    result.success = success;
    output.writeMessageBegin("queryGroupPage", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

NodisProcessor.prototype.process_queryPrefixUserPage = function(seqid, input, output) {
  var args = new Nodis_queryPrefixUserPage_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Nodis_queryPrefixUserPage_result();
  this._handler.queryPrefixUserPage(args.queryStr, function (success) {
    result.success = success;
    output.writeMessageBegin("queryPrefixUserPage", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

